name: AMI build

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build AMI and Share
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14
      - name: Install dependencies
        run: npm install
      - name: Display .env file
        run: |
          echo "DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}" >> .env
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
          echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> .env
          echo "PORT=${{ secrets.PORT }}" >> .env
          echo "HOST=${{ secrets.HOST }}" >> .env
          cat .env
      - name: configuremysql
        run: |
          sudo apt-get update
          sudo apt-get install -y curl
          sudo systemctl start mysql
          sudo systemctl status mysql
          mysql -u ${{ secrets.DATABASE_USERNAME }} -p"${{ secrets.DATABASE_PASSWORD }}" -e "CREATE DATABASE ${{ secrets.DATABASE_NAME }};"

      - name: Run Integration Tests
        run: npm test

      - name: Download webapp repository

        run: zip -r webapp.zip ./

      - name: Configure AWS Credentials

        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region us-east-1 
          aws configure set default.output json
          aws configure set profile.dev.aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set profile.dev.aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build AMI with Packer
        run: |
          packer init myami.pkr.hcl
          packer fmt myami.pkr.hcl
          packer build myami.pkr.hcl

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_PROD_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_PROD_SECRET_KEY }}
          aws-region: us-east-1
      - name: Instance Refresh automation / Continuous Delivery
        run: |
          sudo apt-get install jq
          ASG_NAME=${{secrets.ASGNAME }}
          LAUNCH_CONFIG=${{secrets.LaunchTemplateName }}
          IMAGE=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d':' -f2)
          IMAGE_ID=$(jq -n \
          --arg img "$IMAGE" \
          '{"ImageId": $img}')
          aws ec2 create-launch-template-version \
          --launch-template-name "$LAUNCH_CONFIG" \
          --version-description updateAMI --source-version 1 \
          --launch-template-data="$IMAGE_ID"
          TEMPLATE_VERSION=$(aws ec2 describe-launch-template-versions --launch-template-name="$LAUNCH_CONFIG" \
          --filters="Name=is-default-version,Values=false" \
          --query 'sort_by(LaunchTemplateVersions, &CreateTime)[-1].[VersionNumber]' --output text)
          aws autoscaling update-auto-scaling-group --auto-scaling-group-name $ASG_NAME \
          --launch-template LaunchTemplateName="$LAUNCH_CONFIG",Version=$TEMPLATE_VERSION
          aws autoscaling start-instance-refresh \
          --auto-scaling-group-name $ASG_NAME --strategy Rolling
          printf "Instance refresh in progress"
          while true;
          do
            instance_refresh_status=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name $ASG_NAME \
            --query "InstanceRefreshes[0].Status" --output text)
            if [ "$instance_refresh_status" = "Successful" ]; then
              printf "\nInstance refresh successful!"
              break
           fi
           if [ "$instance_refresh_status" = "Cancelling" ] || [ "$instance_refresh_status" = "Cancelled" ] || [ "$instance_refresh_status" = "Failed" ]; then
             printf "\nInstance refresh failed!"
            exit 1
            fi
            echo -ne "."
            sleep 10
          done
